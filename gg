--[[
 .____                  ________ ___.    _____                           __                
 |    |    __ _______   \_____  \\_ |___/ ____\_ __  ______ ____ _____ _/  |_  ___________ 
 |    |   |  |  \__  \   /   |   \| __ \   __\  |  \/  ___// ___\\__  \\   __\/  _ \_  __ \
 |    |___|  |  // __ \_/    |    \ \_\ \  | |  |  /\___ \\  \___ / __ \|  | (  <_> )  | \/
 |_______ \____/(____  /\_______  /___  /__| |____//____  >\___  >____  /__|  \____/|__|   
         \/          \/         \/    \/                \/     \/     \/                   
          \_Welcome to LuaObfuscator.com   (Alpha 0.10.7) ~  Much Love, Ferib 

]]--

local StrToNumber = tonumber;
local Byte = string.byte;
local Char = string.char;
local Sub = string.sub;
local Subg = string.gsub;
local Rep = string.rep;
local Concat = table.concat;
local Insert = table.insert;
local LDExp = math.ldexp;
local GetFEnv = getfenv or function()
	return _ENV;
end;
local Setmetatable = setmetatable;
local PCall = pcall;
local Select = select;
local Unpack = unpack or table.unpack;
local ToNumber = tonumber;
local function VMCall(ByteString, vmenv, ...)
	local DIP = 1;
	local repeatNext;
	ByteString = Subg(Sub(ByteString, 5), "..", function(byte)
		if (Byte(byte, 2) == 79) then
			local FlatIdent_67517 = 0;
			while true do
				if (FlatIdent_67517 == 0) then
					repeatNext = StrToNumber(Sub(byte, 1, 1));
					return "";
				end
			end
		else
			local a = Char(StrToNumber(byte, 16));
			if repeatNext then
				local b = Rep(a, repeatNext);
				repeatNext = nil;
				return b;
			else
				return a;
			end
		end
	end);
	local function gBit(Bit, Start, End)
		if End then
			local FlatIdent_628E3 = 0;
			local Res;
			while true do
				if (FlatIdent_628E3 == 0) then
					Res = (Bit / (2 ^ (Start - 1))) % (2 ^ (((End - 1) - (Start - 1)) + 1));
					return Res - (Res % 1);
				end
			end
		else
			local Plc = 2 ^ (Start - 1);
			return (((Bit % (Plc + Plc)) >= Plc) and 1) or 0;
		end
	end
	local function gBits8()
		local FlatIdent_7126A = 0;
		local a;
		while true do
			if (FlatIdent_7126A == 1) then
				return a;
			end
			if (FlatIdent_7126A == 0) then
				a = Byte(ByteString, DIP, DIP);
				DIP = DIP + 1;
				FlatIdent_7126A = 1;
			end
		end
	end
	local function gBits16()
		local a, b = Byte(ByteString, DIP, DIP + 2);
		DIP = DIP + 2;
		return (b * 256) + a;
	end
	local function gBits32()
		local FlatIdent_2E34E = 0;
		local a;
		local b;
		local c;
		local d;
		while true do
			if (FlatIdent_2E34E == 0) then
				a, b, c, d = Byte(ByteString, DIP, DIP + 3);
				DIP = DIP + 4;
				FlatIdent_2E34E = 1;
			end
			if (FlatIdent_2E34E == 1) then
				return (d * 16777216) + (c * 65536) + (b * 256) + a;
			end
		end
	end
	local function gFloat()
		local FlatIdent_2661B = 0;
		local Left;
		local Right;
		local IsNormal;
		local Mantissa;
		local Exponent;
		local Sign;
		while true do
			if (FlatIdent_2661B == 1) then
				IsNormal = 1;
				Mantissa = (gBit(Right, 1, 20) * (2 ^ 32)) + Left;
				FlatIdent_2661B = 2;
			end
			if (FlatIdent_2661B == 2) then
				Exponent = gBit(Right, 21, 31);
				Sign = ((gBit(Right, 32) == 1) and -1) or 1;
				FlatIdent_2661B = 3;
			end
			if (FlatIdent_2661B == 0) then
				Left = gBits32();
				Right = gBits32();
				FlatIdent_2661B = 1;
			end
			if (FlatIdent_2661B == 3) then
				if (Exponent == 0) then
					if (Mantissa == 0) then
						return Sign * 0;
					else
						Exponent = 1;
						IsNormal = 0;
					end
				elseif (Exponent == 2047) then
					return ((Mantissa == 0) and (Sign * (1 / 0))) or (Sign * NaN);
				end
				return LDExp(Sign, Exponent - 1023) * (IsNormal + (Mantissa / (2 ^ 52)));
			end
		end
	end
	local function gString(Len)
		local Str;
		if not Len then
			Len = gBits32();
			if (Len == 0) then
				return "";
			end
		end
		Str = Sub(ByteString, DIP, (DIP + Len) - 1);
		DIP = DIP + Len;
		local FStr = {};
		for Idx = 1, #Str do
			FStr[Idx] = Char(Byte(Sub(Str, Idx, Idx)));
		end
		return Concat(FStr);
	end
	local gInt = gBits32;
	local function _R(...)
		return {...}, Select("#", ...);
	end
	local function Deserialize()
		local Instrs = {};
		local Functions = {};
		local Lines = {};
		local Chunk = {Instrs,Functions,nil,Lines};
		local ConstCount = gBits32();
		local Consts = {};
		for Idx = 1, ConstCount do
			local FlatIdent_4223E = 0;
			local Type;
			local Cons;
			while true do
				if (FlatIdent_4223E == 0) then
					Type = gBits8();
					Cons = nil;
					FlatIdent_4223E = 1;
				end
				if (FlatIdent_4223E == 1) then
					if (Type == 1) then
						Cons = gBits8() ~= 0;
					elseif (Type == 2) then
						Cons = gFloat();
					elseif (Type == 3) then
						Cons = gString();
					end
					Consts[Idx] = Cons;
					break;
				end
			end
		end
		Chunk[3] = gBits8();
		for Idx = 1, gBits32() do
			local FlatIdent_91608 = 0;
			local Descriptor;
			while true do
				if (FlatIdent_91608 == 0) then
					Descriptor = gBits8();
					if (gBit(Descriptor, 1, 1) == 0) then
						local Type = gBit(Descriptor, 2, 3);
						local Mask = gBit(Descriptor, 4, 6);
						local Inst = {gBits16(),gBits16(),nil,nil};
						if (Type == 0) then
							Inst[3] = gBits16();
							Inst[4] = gBits16();
						elseif (Type == 1) then
							Inst[3] = gBits32();
						elseif (Type == 2) then
							Inst[3] = gBits32() - (2 ^ 16);
						elseif (Type == 3) then
							Inst[3] = gBits32() - (2 ^ 16);
							Inst[4] = gBits16();
						end
						if (gBit(Mask, 1, 1) == 1) then
							Inst[2] = Consts[Inst[2]];
						end
						if (gBit(Mask, 2, 2) == 1) then
							Inst[3] = Consts[Inst[3]];
						end
						if (gBit(Mask, 3, 3) == 1) then
							Inst[4] = Consts[Inst[4]];
						end
						Instrs[Idx] = Inst;
					end
					break;
				end
			end
		end
		for Idx = 1, gBits32() do
			Functions[Idx - 1] = Deserialize();
		end
		return Chunk;
	end
	local function Wrap(Chunk, Upvalues, Env)
		local Instr = Chunk[1];
		local Proto = Chunk[2];
		local Params = Chunk[3];
		return function(...)
			local Instr = Instr;
			local Proto = Proto;
			local Params = Params;
			local _R = _R;
			local VIP = 1;
			local Top = -1;
			local Vararg = {};
			local Args = {...};
			local PCount = Select("#", ...) - 1;
			local Lupvals = {};
			local Stk = {};
			for Idx = 0, PCount do
				if (Idx >= Params) then
					Vararg[Idx - Params] = Args[Idx + 1];
				else
					Stk[Idx] = Args[Idx + 1];
				end
			end
			local Varargsz = (PCount - Params) + 1;
			local Inst;
			local Enum;
			while true do
				local FlatIdent_1076E = 0;
				while true do
					if (1 == FlatIdent_1076E) then
						if (Enum <= 35) then
							if (Enum <= 17) then
								if (Enum <= 8) then
									if (Enum <= 3) then
										if (Enum <= 1) then
											if (Enum == 0) then
												VIP = Inst[3];
											else
												Stk[Inst[2]] = Env[Inst[3]];
											end
										elseif (Enum > 2) then
											local FlatIdent_A36C = 0;
											local A;
											while true do
												if (FlatIdent_A36C == 0) then
													A = Inst[2];
													do
														return Stk[A](Unpack(Stk, A + 1, Inst[3]));
													end
													break;
												end
											end
										else
											local A = Inst[2];
											local Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
											Top = (Limit + A) - 1;
											local Edx = 0;
											for Idx = A, Top do
												local FlatIdent_912A7 = 0;
												while true do
													if (FlatIdent_912A7 == 0) then
														Edx = Edx + 1;
														Stk[Idx] = Results[Edx];
														break;
													end
												end
											end
										end
									elseif (Enum <= 5) then
										if (Enum == 4) then
											local FlatIdent_69C4C = 0;
											local A;
											while true do
												if (FlatIdent_69C4C == 0) then
													A = Inst[2];
													Stk[A](Unpack(Stk, A + 1, Top));
													break;
												end
											end
										elseif (Inst[2] == Stk[Inst[4]]) then
											VIP = VIP + 1;
										else
											VIP = Inst[3];
										end
									elseif (Enum <= 6) then
										local FlatIdent_7F35E = 0;
										local A;
										while true do
											if (FlatIdent_7F35E == 0) then
												A = Inst[2];
												Stk[A](Unpack(Stk, A + 1, Inst[3]));
												break;
											end
										end
									elseif (Enum == 7) then
										do
											return;
										end
									else
										Stk[Inst[2]] = Upvalues[Inst[3]];
									end
								elseif (Enum <= 12) then
									if (Enum <= 10) then
										if (Enum > 9) then
											local FlatIdent_A9A3 = 0;
											local A;
											while true do
												if (FlatIdent_A9A3 == 0) then
													A = Inst[2];
													Stk[A] = Stk[A](Stk[A + 1]);
													break;
												end
											end
										else
											local FlatIdent_40CF = 0;
											local A;
											local Results;
											local Edx;
											while true do
												if (FlatIdent_40CF == 0) then
													A = Inst[2];
													Results = {Stk[A](Stk[A + 1])};
													FlatIdent_40CF = 1;
												end
												if (FlatIdent_40CF == 1) then
													Edx = 0;
													for Idx = A, Inst[4] do
														local FlatIdent_79536 = 0;
														while true do
															if (FlatIdent_79536 == 0) then
																Edx = Edx + 1;
																Stk[Idx] = Results[Edx];
																break;
															end
														end
													end
													break;
												end
											end
										end
									elseif (Enum == 11) then
										local FlatIdent_65290 = 0;
										local A;
										local T;
										while true do
											if (FlatIdent_65290 == 1) then
												for Idx = A + 1, Top do
													Insert(T, Stk[Idx]);
												end
												break;
											end
											if (FlatIdent_65290 == 0) then
												A = Inst[2];
												T = Stk[A];
												FlatIdent_65290 = 1;
											end
										end
									else
										Stk[Inst[2]] = Inst[3] ~= 0;
									end
								elseif (Enum <= 14) then
									if (Enum > 13) then
										if not Stk[Inst[2]] then
											VIP = VIP + 1;
										else
											VIP = Inst[3];
										end
									else
										local FlatIdent_3F7F4 = 0;
										local A;
										local Results;
										local Edx;
										while true do
											if (0 == FlatIdent_3F7F4) then
												A = Inst[2];
												Results = {Stk[A](Stk[A + 1])};
												FlatIdent_3F7F4 = 1;
											end
											if (FlatIdent_3F7F4 == 1) then
												Edx = 0;
												for Idx = A, Inst[4] do
													Edx = Edx + 1;
													Stk[Idx] = Results[Edx];
												end
												break;
											end
										end
									end
								elseif (Enum <= 15) then
									local A = Inst[2];
									do
										return Stk[A](Unpack(Stk, A + 1, Inst[3]));
									end
								elseif (Enum == 16) then
									Stk[Inst[2]] = {};
								else
									local FlatIdent_2D2B8 = 0;
									local A;
									while true do
										if (FlatIdent_2D2B8 == 0) then
											A = Inst[2];
											Stk[A](Unpack(Stk, A + 1, Inst[3]));
											break;
										end
									end
								end
							elseif (Enum <= 26) then
								if (Enum <= 21) then
									if (Enum <= 19) then
										if (Enum > 18) then
											Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
										else
											Env[Inst[3]] = Stk[Inst[2]];
										end
									elseif (Enum == 20) then
										Stk[Inst[2]][Inst[3]] = Stk[Inst[4]];
									else
										local FlatIdent_E0D0 = 0;
										local NewProto;
										local NewUvals;
										local Indexes;
										while true do
											if (FlatIdent_E0D0 == 2) then
												for Idx = 1, Inst[4] do
													VIP = VIP + 1;
													local Mvm = Instr[VIP];
													if (Mvm[1] == 61) then
														Indexes[Idx - 1] = {Stk,Mvm[3]};
													else
														Indexes[Idx - 1] = {Upvalues,Mvm[3]};
													end
													Lupvals[#Lupvals + 1] = Indexes;
												end
												Stk[Inst[2]] = Wrap(NewProto, NewUvals, Env);
												break;
											end
											if (FlatIdent_E0D0 == 0) then
												NewProto = Proto[Inst[3]];
												NewUvals = nil;
												FlatIdent_E0D0 = 1;
											end
											if (FlatIdent_E0D0 == 1) then
												Indexes = {};
												NewUvals = Setmetatable({}, {__index=function(_, Key)
													local FlatIdent_759F1 = 0;
													local Val;
													while true do
														if (0 == FlatIdent_759F1) then
															Val = Indexes[Key];
															return Val[1][Val[2]];
														end
													end
												end,__newindex=function(_, Key, Value)
													local Val = Indexes[Key];
													Val[1][Val[2]] = Value;
												end});
												FlatIdent_E0D0 = 2;
											end
										end
									end
								elseif (Enum <= 23) then
									if (Enum > 22) then
										Stk[Inst[2]] = Stk[Inst[3]];
									else
										Stk[Inst[2]][Inst[3]] = Inst[4];
									end
								elseif (Enum <= 24) then
									Stk[Inst[2]] = Stk[Inst[3]][Inst[4]];
								elseif (Enum > 25) then
									for Idx = Inst[2], Inst[3] do
										Stk[Idx] = nil;
									end
								elseif not Stk[Inst[2]] then
									VIP = VIP + 1;
								else
									VIP = Inst[3];
								end
							elseif (Enum <= 30) then
								if (Enum <= 28) then
									if (Enum == 27) then
										local A = Inst[2];
										Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
									else
										local A = Inst[2];
										Stk[A](Stk[A + 1]);
									end
								elseif (Enum > 29) then
									VIP = Inst[3];
								else
									for Idx = Inst[2], Inst[3] do
										Stk[Idx] = nil;
									end
								end
							elseif (Enum <= 32) then
								if (Enum == 31) then
									local A = Inst[2];
									Stk[A] = Stk[A]();
								elseif (Stk[Inst[2]] == Inst[4]) then
									VIP = VIP + 1;
								else
									VIP = Inst[3];
								end
							elseif (Enum <= 33) then
								local A = Inst[2];
								local C = Inst[4];
								local CB = A + 2;
								local Result = {Stk[A](Stk[A + 1], Stk[CB])};
								for Idx = 1, C do
									Stk[CB + Idx] = Result[Idx];
								end
								local R = Result[1];
								if R then
									local FlatIdent_324DE = 0;
									while true do
										if (0 == FlatIdent_324DE) then
											Stk[CB] = R;
											VIP = Inst[3];
											break;
										end
									end
								else
									VIP = VIP + 1;
								end
							elseif (Enum > 34) then
								local FlatIdent_35A31 = 0;
								local B;
								local K;
								while true do
									if (FlatIdent_35A31 == 0) then
										B = Inst[3];
										K = Stk[B];
										FlatIdent_35A31 = 1;
									end
									if (FlatIdent_35A31 == 1) then
										for Idx = B + 1, Inst[4] do
											K = K .. Stk[Idx];
										end
										Stk[Inst[2]] = K;
										break;
									end
								end
							else
								do
									return;
								end
							end
						elseif (Enum <= 53) then
							if (Enum <= 44) then
								if (Enum <= 39) then
									if (Enum <= 37) then
										if (Enum > 36) then
											local FlatIdent_64E40 = 0;
											local A;
											while true do
												if (FlatIdent_64E40 == 0) then
													A = Inst[2];
													Stk[A](Unpack(Stk, A + 1, Top));
													break;
												end
											end
										else
											local FlatIdent_8D1A5 = 0;
											local A;
											while true do
												if (0 == FlatIdent_8D1A5) then
													A = Inst[2];
													Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
													break;
												end
											end
										end
									elseif (Enum == 38) then
										local A = Inst[2];
										local C = Inst[4];
										local CB = A + 2;
										local Result = {Stk[A](Stk[A + 1], Stk[CB])};
										for Idx = 1, C do
											Stk[CB + Idx] = Result[Idx];
										end
										local R = Result[1];
										if R then
											Stk[CB] = R;
											VIP = Inst[3];
										else
											VIP = VIP + 1;
										end
									else
										Stk[Inst[2]] = Wrap(Proto[Inst[3]], nil, Env);
									end
								elseif (Enum <= 41) then
									if (Enum == 40) then
										if (Stk[Inst[2]] == Inst[4]) then
											VIP = VIP + 1;
										else
											VIP = Inst[3];
										end
									else
										local FlatIdent_4E551 = 0;
										local A;
										local T;
										local B;
										while true do
											if (FlatIdent_4E551 == 0) then
												A = Inst[2];
												T = Stk[A];
												FlatIdent_4E551 = 1;
											end
											if (FlatIdent_4E551 == 1) then
												B = Inst[3];
												for Idx = 1, B do
													T[Idx] = Stk[A + Idx];
												end
												break;
											end
										end
									end
								elseif (Enum <= 42) then
									Stk[Inst[2]] = Upvalues[Inst[3]];
								elseif (Enum == 43) then
									local FlatIdent_61EE = 0;
									local A;
									local T;
									local B;
									while true do
										if (0 == FlatIdent_61EE) then
											A = Inst[2];
											T = Stk[A];
											FlatIdent_61EE = 1;
										end
										if (1 == FlatIdent_61EE) then
											B = Inst[3];
											for Idx = 1, B do
												T[Idx] = Stk[A + Idx];
											end
											break;
										end
									end
								else
									local FlatIdent_6C033 = 0;
									local A;
									while true do
										if (0 == FlatIdent_6C033) then
											A = Inst[2];
											Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
											break;
										end
									end
								end
							elseif (Enum <= 48) then
								if (Enum <= 46) then
									if (Enum == 45) then
										local FlatIdent_5B2CE = 0;
										local B;
										local K;
										while true do
											if (FlatIdent_5B2CE == 1) then
												for Idx = B + 1, Inst[4] do
													K = K .. Stk[Idx];
												end
												Stk[Inst[2]] = K;
												break;
											end
											if (FlatIdent_5B2CE == 0) then
												B = Inst[3];
												K = Stk[B];
												FlatIdent_5B2CE = 1;
											end
										end
									else
										local FlatIdent_55D83 = 0;
										local A;
										local B;
										while true do
											if (FlatIdent_55D83 == 1) then
												Stk[A + 1] = B;
												Stk[A] = B[Inst[4]];
												break;
											end
											if (FlatIdent_55D83 == 0) then
												A = Inst[2];
												B = Stk[Inst[3]];
												FlatIdent_55D83 = 1;
											end
										end
									end
								elseif (Enum > 47) then
									Stk[Inst[2]] = Inst[3] ~= 0;
								else
									Env[Inst[3]] = Stk[Inst[2]];
								end
							elseif (Enum <= 50) then
								if (Enum > 49) then
									local A = Inst[2];
									local T = Stk[A];
									for Idx = A + 1, Inst[3] do
										Insert(T, Stk[Idx]);
									end
								else
									local FlatIdent_2388 = 0;
									local A;
									local B;
									while true do
										if (1 == FlatIdent_2388) then
											Stk[A + 1] = B;
											Stk[A] = B[Inst[4]];
											break;
										end
										if (FlatIdent_2388 == 0) then
											A = Inst[2];
											B = Stk[Inst[3]];
											FlatIdent_2388 = 1;
										end
									end
								end
							elseif (Enum <= 51) then
								local FlatIdent_30F75 = 0;
								local A;
								while true do
									if (0 == FlatIdent_30F75) then
										A = Inst[2];
										Stk[A] = Stk[A](Stk[A + 1]);
										break;
									end
								end
							elseif (Enum > 52) then
								local FlatIdent_8BA1E = 0;
								local A;
								local Results;
								local Limit;
								local Edx;
								while true do
									if (FlatIdent_8BA1E == 1) then
										Top = (Limit + A) - 1;
										Edx = 0;
										FlatIdent_8BA1E = 2;
									end
									if (FlatIdent_8BA1E == 0) then
										A = Inst[2];
										Results, Limit = _R(Stk[A](Unpack(Stk, A + 1, Inst[3])));
										FlatIdent_8BA1E = 1;
									end
									if (FlatIdent_8BA1E == 2) then
										for Idx = A, Top do
											Edx = Edx + 1;
											Stk[Idx] = Results[Edx];
										end
										break;
									end
								end
							else
								local FlatIdent_5AA23 = 0;
								local A;
								while true do
									if (FlatIdent_5AA23 == 0) then
										A = Inst[2];
										do
											return Unpack(Stk, A, Top);
										end
										break;
									end
								end
							end
						elseif (Enum <= 62) then
							if (Enum <= 57) then
								if (Enum <= 55) then
									if (Enum > 54) then
										local FlatIdent_69253 = 0;
										local A;
										while true do
											if (0 == FlatIdent_69253) then
												A = Inst[2];
												Stk[A] = Stk[A]();
												break;
											end
										end
									elseif (Inst[2] == Stk[Inst[4]]) then
										VIP = VIP + 1;
									else
										VIP = Inst[3];
									end
								elseif (Enum == 56) then
									Stk[Inst[2]] = Stk[Inst[3]] * Stk[Inst[4]];
								elseif (Stk[Inst[2]] ~= Inst[4]) then
									VIP = VIP + 1;
								else
									VIP = Inst[3];
								end
							elseif (Enum <= 59) then
								if (Enum > 58) then
									local A = Inst[2];
									local T = Stk[A];
									for Idx = A + 1, Top do
										Insert(T, Stk[Idx]);
									end
								else
									Stk[Inst[2]] = Wrap(Proto[Inst[3]], nil, Env);
								end
							elseif (Enum <= 60) then
								local FlatIdent_8B336 = 0;
								local NewProto;
								local NewUvals;
								local Indexes;
								while true do
									if (FlatIdent_8B336 == 1) then
										Indexes = {};
										NewUvals = Setmetatable({}, {__index=function(_, Key)
											local Val = Indexes[Key];
											return Val[1][Val[2]];
										end,__newindex=function(_, Key, Value)
											local FlatIdent_6D9D2 = 0;
											local Val;
											while true do
												if (FlatIdent_6D9D2 == 0) then
													Val = Indexes[Key];
													Val[1][Val[2]] = Value;
													break;
												end
											end
										end});
										FlatIdent_8B336 = 2;
									end
									if (FlatIdent_8B336 == 0) then
										NewProto = Proto[Inst[3]];
										NewUvals = nil;
										FlatIdent_8B336 = 1;
									end
									if (FlatIdent_8B336 == 2) then
										for Idx = 1, Inst[4] do
											local FlatIdent_6225E = 0;
											local Mvm;
											while true do
												if (FlatIdent_6225E == 1) then
													if (Mvm[1] == 61) then
														Indexes[Idx - 1] = {Stk,Mvm[3]};
													else
														Indexes[Idx - 1] = {Upvalues,Mvm[3]};
													end
													Lupvals[#Lupvals + 1] = Indexes;
													break;
												end
												if (FlatIdent_6225E == 0) then
													VIP = VIP + 1;
													Mvm = Instr[VIP];
													FlatIdent_6225E = 1;
												end
											end
										end
										Stk[Inst[2]] = Wrap(NewProto, NewUvals, Env);
										break;
									end
								end
							elseif (Enum == 61) then
								Stk[Inst[2]] = Stk[Inst[3]];
							else
								Stk[Inst[2]] = Stk[Inst[3]] * Stk[Inst[4]];
							end
						elseif (Enum <= 67) then
							if (Enum <= 64) then
								if (Enum == 63) then
									Stk[Inst[2]] = Inst[3];
								else
									Stk[Inst[2]] = Env[Inst[3]];
								end
							elseif (Enum <= 65) then
								local A = Inst[2];
								Stk[A] = Stk[A](Unpack(Stk, A + 1, Inst[3]));
							elseif (Enum == 66) then
								if (Stk[Inst[2]] ~= Inst[4]) then
									VIP = VIP + 1;
								else
									VIP = Inst[3];
								end
							else
								Stk[Inst[2]] = {};
							end
						elseif (Enum <= 69) then
							if (Enum == 68) then
								Stk[Inst[2]] = Inst[3];
							else
								Stk[Inst[2]][Inst[3]] = Inst[4];
							end
						elseif (Enum <= 70) then
							local FlatIdent_5202D = 0;
							local A;
							while true do
								if (0 == FlatIdent_5202D) then
									A = Inst[2];
									Stk[A](Stk[A + 1]);
									break;
								end
							end
						elseif (Enum == 71) then
							Stk[Inst[2]][Inst[3]] = Stk[Inst[4]];
						else
							local A = Inst[2];
							do
								return Unpack(Stk, A, Top);
							end
						end
						VIP = VIP + 1;
						break;
					end
					if (FlatIdent_1076E == 0) then
						Inst = Instr[VIP];
						Enum = Inst[1];
						FlatIdent_1076E = 1;
					end
				end
			end
		end;
	end
	return Wrap(Deserialize(), {}, vmenv)(...);
end
return VMCall("LOL!", GetFEnv(), ...);
